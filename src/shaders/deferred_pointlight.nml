<NML = 1.0>

<PointlightShadowMap =
	<Vertex = "
		varying	vec3		forward;
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
			forward = (gl_ModelViewMatrix * gl_Vertex).xyz;
		}
	">
	<Pixel = "
		varying	vec3		forward;

		uniform	vec2		inverse_buffer_size;
		uniform	float		view_depth_offset;

		uniform	float		range;
		uniform vec3		position_view_space,
							diffuse_color,
							specular_color,
							shadow_color;

		uniform	sampler2D	gbuffer0, gbuffer1, gbuffer2;
		uniform	sampler2DShadow	psm_0, psm_1, psm_2, psm_3, psm_4, psm_5;

		uniform float		inverse_shadowmap_size, shadow_bias;

		uniform	mat4		psm_0_projection_matrix,
							psm_1_projection_matrix,
							psm_2_projection_matrix,
							psm_3_projection_matrix,
							psm_4_projection_matrix,
							psm_5_projection_matrix;

		uniform	mat4		view_to_light_matrix;

		#(ComputePCF)
		#(UnpackNormalDepth)

		float	EvaluatePCF(vec3 frag_viewpos, vec3 dn)
		{
			float	pcf = 1.0;

					if	((dn.z > 0.0) && (dn.x > -dn.z) && (dn.x < dn.z) && (dn.y > -dn.z) && (dn.y < dn.z))
					pcf = ComputePCF(frag_viewpos, psm_0_projection_matrix, psm_0, 1.5);
			else	if	((dn.z < 0.0) && (dn.x > dn.z) && (dn.x < -dn.z) && (dn.y > dn.z) && (dn.y < -dn.z))
					pcf = ComputePCF(frag_viewpos, psm_2_projection_matrix, psm_2, 1.5);

			else	if	((dn.x > 0.0) && (dn.y > -dn.x) && (dn.y < dn.x) && (dn.z > -dn.x) && (dn.z < dn.x))
					pcf = ComputePCF(frag_viewpos, psm_1_projection_matrix, psm_1, 1.5);
			else	if	((dn.x < 0.0) && (dn.y > dn.x) && (dn.y < -dn.x) && (dn.z > dn.x) && (dn.z < -dn.x))
					pcf = ComputePCF(frag_viewpos, psm_3_projection_matrix, psm_3, 1.5);

			else	if	((dn.y > 0.0) && (dn.x > -dn.y) && (dn.x < dn.y) && (dn.z > -dn.y) && (dn.z < dn.y))
					pcf = ComputePCF(frag_viewpos, psm_5_projection_matrix, psm_5, 1.5);
			else	if	((dn.y < 0.0) && (dn.x > dn.y) && (dn.x < -dn.y) && (dn.z > dn.y) && (dn.z < -dn.y))
					pcf = ComputePCF(frag_viewpos, psm_4_projection_matrix, psm_4, 1.5);

			return pcf;
		}

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	norm_dpth = UnpackNormalDepth(UV);
			if	(norm_dpth.z == 0.0)
				discard;
			vec3	frag_viewpos = (forward / forward.z) * (norm_dpth.w + view_depth_offset - shadow_bias);

			vec3	dn = normalize((view_to_light_matrix * vec4(frag_viewpos, 1.0)).xyz);
			float	pcf = EvaluatePCF(frag_viewpos, dn);

			if	(pcf > 0.0)
			{
				// Normal in viewmodel space.
				vec3	normal = norm_dpth.xyz;
	
				// Light diffuse contribution.
				vec3	dt = frag_viewpos - position_view_space;
				float	dl = length(dt);
				dt = dt / dl;
				float	atten = range > 0.0 ? max(1.0 - dl / range, 0.0) : 1.0;
				float	idiff = max(-dot(dt, normal) * atten, 0.0);
	
				// Light specular contribution.
				vec4	spec_glos = texture2D(gbuffer2, UV);
				vec3	e = reflect(normalize(frag_viewpos), normal);
				float	ispec = pow(max(-dot(dt, normalize(e)), 0.0), spec_glos.w * 96.0) * atten;

				// Full contribution.
				vec4	diff_alpha = texture2D(gbuffer1, UV);
				gl_FragColor = vec4(mix(shadow_color, diff_alpha.rgb * diffuse_color * idiff + spec_glos.rgb * specular_color * ispec, pcf), 1.0);
			}
			else	gl_FragColor = vec4(shadow_color, 1.0);
		}
	">
>

<Pointlight =
	<Vertex = "
		varying	vec3		forward;
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
			forward = (gl_ModelViewMatrix * gl_Vertex).xyz;
		}
	">
	<Pixel = "
		varying	vec3		forward;

		uniform	vec2		inverse_buffer_size;
		uniform	float		view_depth_offset;

		uniform	float		range;
		uniform vec3		position_view_space,
							diffuse_color,
							specular_color;

		uniform	sampler2D	gbuffer0, gbuffer1, gbuffer2;

		#(UnpackNormalDepth)

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	norm_dpth = UnpackNormalDepth(UV);
			if	(norm_dpth.z == 0.0)
				discard;
			vec3	frag_viewpos = (forward / forward.z) * (norm_dpth.w + view_depth_offset);

			// Normal in viewmodel space.
			vec3	normal = norm_dpth.xyz;

			// Light diffuse contribution.
			vec3	dt = frag_viewpos - position_view_space;
			float	dl = length(dt);
			dt = dt / dl;
			float	atten = range > 0.0 ? max(1.0 - dl / range, 0.0) : 1.0;
			float	idiff = max(-dot(dt, normal) * atten, 0.0);

			// Full contribution.
			vec4	diff_alpha = texture2D(gbuffer1, UV);
			gl_FragColor = vec4(diff_alpha.rgb * diffuse_color * idiff, 1.0);
		}
	">
>

<PointlightSpecular =
	<Vertex = "
		varying	vec3		forward;
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
			forward = (gl_ModelViewMatrix * gl_Vertex).xyz;
		}
	">
	<Pixel = "
		varying	vec3		forward;

		uniform	vec2		inverse_buffer_size;
		uniform	float		view_depth_offset;

		uniform	float		range;
		uniform vec3		position_view_space,
							diffuse_color,
							specular_color;

		uniform	sampler2D	gbuffer0, gbuffer1, gbuffer2;

		#(UnpackNormalDepth)

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	norm_dpth = UnpackNormalDepth(UV);
			if	(norm_dpth.z == 0.0)
				discard;
			vec3	frag_viewpos = (forward / forward.z) * (norm_dpth.w + view_depth_offset);

			// Normal in viewmodel space.
			vec3	normal = norm_dpth.xyz;

			// Light diffuse contribution.
			vec3	dt = frag_viewpos - position_view_space;
			float	dl = length(dt);
			dt = dt / dl;
			float	atten = range > 0.0 ? max(1.0 - dl / range, 0.0) : 1.0;
			float	idiff = max(-dot(dt, normal) * atten, 0.0);

			// Light specular contribution.
			vec4	spec_glos = texture2D(gbuffer2, UV);
			vec3	e = reflect(normalize(frag_viewpos), normal);
			float	ispec = pow(max(-dot(dt, normalize(e)), 0.0), spec_glos.w * 96.0) * atten;

			// Full contribution.
			vec4	diff_alpha = texture2D(gbuffer1, UV);
			gl_FragColor = vec4(diff_alpha.rgb * diffuse_color * idiff + spec_glos.rgb * specular_color * ispec, 1.0);
		}
	">
>