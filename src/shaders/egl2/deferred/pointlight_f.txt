varying	vec3		forward;

uniform	vec2		u_ibs;
uniform	float		u_lr, u_vdo;
uniform vec3		u_lvp, u_diffc, u_specc;

uniform	sampler2D	gbuffer0, gbuffer1, gbuffer2;

#(UnpackNormalDepth)

void	main()
{
	vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * u_ibs;
	vec4	norm_dpth = UnpackNormalDepth(UV);

	if	(norm_dpth.z == 0.0)
		gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);

	else
	{
		vec3	frag_viewpos = (forward / forward.z) * (norm_dpth.w + u_vdo);

		// Normal in viewmodel space.
		vec3	normal = norm_dpth.xyz;

		// Light diffuse contribution.
		vec3	dt = frag_viewpos - u_lvp;
		float	dl = length(dt);
		dt = dt / dl;

		float	atten = u_lr > 0.0 ? max(1.0 - dl / u_lr, 0.0) : 1.0;
		float	idiff = max(-dot(dt, normal) * atten, 0.0);
		
		// Light specular contribution.
		vec4	spec_glos = texture2D(gbuffer2, UV);
		vec3	e = reflect(normalize(frag_viewpos), normal);
		float	ispec = pow(max(-dot(dt, normalize(e)), 0.0), spec_glos.w * 96.0) * atten;

		// Full contribution.
		vec4	diff_alpha = texture2D(gbuffer1, UV);

		gl_FragColor = vec4(diff_alpha.rgb * u_diffc * idiff + spec_glos.rgb * u_specc * ispec, 1.0);
	}
}
