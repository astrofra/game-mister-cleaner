varying	vec3		forward;

uniform	vec2		u_ibs;
uniform vec3		u_diffc, u_specc, u_lvp, u_lvd;
uniform	float		u_lr, u_ledge, u_lcone, u_vdo;
uniform	sampler2D	gbuffer0, gbuffer1, gbuffer2;

#(UnpackNormalDepth)

void	main()
{
	vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * u_ibs;
	vec4	norm_dpth = UnpackNormalDepth(UV);
	if	(norm_dpth.z == 0.0)
		discard;

	vec3	frag_viewpos = (forward / forward.z) * (norm_dpth.w + u_vdo);

	// Normal in viewmodel space.
	vec3	normal = norm_dpth.xyz;

	// Light diffuse contribution.
	vec3	dt = frag_viewpos - u_lvp;
	float	dl = length(dt);
	dt = dt / dl;
	float	atten = u_lr > 0.0 ? max(1.0 - dl / u_lr, 0.0) : 1.0;
	float	idiff = max(-dot(dt, normal) * atten, 0.0);

	float	sdiff = dot(u_lvd, dt);
	if	(sdiff < u_lcone)
	{
		if	(sdiff < 0.0)
			sdiff = 0.0;
		else
			sdiff = max((sdiff - u_ledge) / (u_lcone - u_ledge), 0.0);
	}
	else	sdiff = 1.0;

	// Light specular contribution.
	vec4	spec_glos = texture2D(gbuffer2, UV);
	vec3	e = reflect(normalize(frag_viewpos), normal);
	float	ispec = pow(max(-dot(dt, normalize(e)), 0.0), spec_glos.w * 96.0) * atten * sdiff;

			// Full contribution.
	vec4	diff_alpha = texture2D(gbuffer1, UV);
	gl_FragColor = vec4(diff_alpha.rgb * u_diffc * idiff * sdiff + spec_glos.rgb * u_specc * ispec, 1.0);
}
