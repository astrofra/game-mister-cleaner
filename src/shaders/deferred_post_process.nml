<NML = 1.0>

<Velocity =
	<Vertex = "
		uniform	mat4		view_previous_matrix, model_previous_matrix;
		varying	vec4		view, previous_view;

		void	main()
		{
			previous_view = gl_ProjectionMatrix * view_previous_matrix * model_previous_matrix * gl_Vertex;
			view = gl_ModelViewProjectionMatrix * gl_Vertex;
			gl_Position = view;
		}
	">
	<Pixel = "
		varying	vec4		view, previous_view;

		void	main()
		{
			vec2	velocity = (previous_view.xy / previous_view.w) - (view.xy / view.w);
			gl_FragColor = vec4(velocity, 0.0, 0.0);
		}
	">
>

<MotionBlur =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">

	<Pixel = "
		uniform	vec2		inverse_buffer_size, inverse_display_size;
		uniform	sampler2D	pp_input, velocity_map, nrm_dpth;
		uniform	float		strength;

		//-----------------------------------------------------
		vec4	sample(vec2 UV, vec2 dt, float depth, vec4 ref)
		{
			float	c_depth = texture2D(nrm_dpth, UV + dt).w;
			return ((c_depth - depth) < -0.1) ? ref : texture2D(pp_input, UV + dt);
		}

		//--------------------
		vec4	mblur(vec2 UV)
		{
			vec2	dt = texture2D(velocity_map, UV).xy * strength;
			float	depth = texture2D(nrm_dpth, UV).w;

			vec4	ref = texture2D(pp_input, UV);
			return length(dt) > 0.0025 ? vec4(
								(
									sample(UV, dt * -0.4, depth, ref) +
									sample(UV, dt * -0.3, depth, ref) +
									sample(UV, dt * -0.2, depth, ref) +
									sample(UV, dt * -0.1, depth, ref) +
									ref +
									sample(UV, dt * 0.1, depth, ref) +
									sample(UV, dt * 0.2, depth, ref) +
									sample(UV, dt * 0.3, depth, ref) +
									sample(UV, dt * 0.4, depth, ref)
								) / 9.0	) : ref;
		}

		//------------
		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			gl_FragColor = mblur(UV);
		}
	">
>

<Fog =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	sampler2D	gbuffer0;

		uniform	vec3		color;
		uniform float		near, inverse_range;

		#(UnpackNormalDepth)

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			float	z = UnpackNormalDepth(UV).w;
			gl_FragColor = vec4(color, clamp(1.0 - (z - near) * inverse_range, 0.0, 1.0));
		}
	">
>

<SSAO =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size, display_buffer_ratio, inverse_projection_2d;
		uniform	sampler2D	gbuffer0, noise_texture;
		uniform float		framebuffer_fx_scaler, view_depth_offset;
		uniform	float		distance, ao_radius, strength;

		#(UnpackNormalDepth)

		float	SSAO(vec2 UV, vec2 offset, vec3 n, vec3 vp)
		{
			UV += offset;
			vec4	nz = UnpackNormalDepth(UV);

			vec3	svc = vec3((((UV * display_buffer_ratio) - vec2(0.5, 0.5)) * 2.0) * inverse_projection_2d, 1.0);
			vec3	np = svc * (nz.w + view_depth_offset);

			vec3	dt = np - vp;
			float	dt_length = length(dt);

			float	d = clamp(dot(n, dt / dt_length), 0.0, 1.0);

			d = d < 0.25 ? d * d : d;
			d = min(d * 4.0, 1.0);
			dt_length /= 4.0;
			float	k = d * max(1.0 - dt_length, 0.0);

			return k;
		}

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * framebuffer_fx_scaler * inverse_buffer_size;
			vec4	nz = UnpackNormalDepth(UV);

			float	z = nz.w;
			vec4	output_fragment;

			if	(z > distance)
				output_fragment = vec4(1.0, 1.0, 1.0, 1.0);

			else
			{
				vec3	n = nz.xyz;
	
				// Unpack depth and compute fragment position in view space.
				vec3	svc = vec3((((UV * display_buffer_ratio) - vec2(0.5, 0.5)) * 2.0) * inverse_projection_2d, 1.0);
				vec3	vp = svc * (z + view_depth_offset);
	
				// Distance scale.
				vec2	kk = inverse_buffer_size * ao_radius / max(z, 1.0);
	
				// Dithering matrix.
				vec4	noise = texture2D(noise_texture, UV / 128.0 * (display_buffer_ratio / inverse_buffer_size));
				float	a = (noise.x + noise.y + noise.z) * 16.0;
				mat2	mat = mat2(cos(a), -sin(a), sin(a), cos(a));
	
				float	k = (
								SSAO(UV, (vec2(-0.5,  -0.5) * mat) * kk, n, vp) +
//								SSAO(UV, (vec2(-0.25, -0.5) * mat) * kk, n, vp) +
								SSAO(UV, (vec2( 0.25, -0.5) * mat) * kk, n, vp) +
//								SSAO(UV, (vec2( 0.5,  -0.5) * mat) * kk, n, vp) +
	
//								SSAO(UV, (vec2(-0.5,  -0.25) * mat) * kk, n, vp) +
								SSAO(UV, (vec2(-0.25, -0.25) * mat) * kk, n, vp) +
//								SSAO(UV, (vec2( 0.25, -0.25) * mat) * kk, n, vp) +
								SSAO(UV, (vec2( 0.5,  -0.25) * mat) * kk, n, vp) +
	
								SSAO(UV, (vec2(-0.5,  0.25) * mat) * kk, n, vp) +
//								SSAO(UV, (vec2(-0.25, 0.25) * mat) * kk, n, vp) +
								SSAO(UV, (vec2( 0.25, 0.25) * mat) * kk, n, vp) +
//								SSAO(UV, (vec2( 0.5,  0.25) * mat) * kk, n, vp) +
	
//								SSAO(UV, (vec2(-0.5,  0.5) * mat) * kk, n, vp) +
								SSAO(UV, (vec2(-0.25, 0.5) * mat) * kk, n, vp) +
//								SSAO(UV, (vec2( 0.25, 0.5) * mat) * kk, n, vp) +
								SSAO(UV, (vec2( 0.5,  0.5) * mat) * kk, n, vp)
							) / 8.0;
	
				k = 1.0 - k;
				k = (k < 0.725) ? k * k : k;

				// Blend to no AO on the last 25% of distance.
				k = mix(k, 1.0, max((z - distance * 0.75) / distance * 0.25, 0.0));
				k = mix(1.0, k, strength);
				output_fragment = vec4(k, k, k, 1.0);
			}
			gl_FragColor = output_fragment;
		}
	">
>

<SSDO =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size, display_buffer_ratio, inverse_projection_2d;
		uniform	sampler2D	gbuffer0, noise_texture, source;
		uniform float		framebuffer_fx_scaler, view_depth_offset;
		uniform	float		distance, ao_radius, strength;
		uniform mat4		projection_matrix;

		#(UnpackNormalDepth)

		vec3	SSDO(vec3 s, vec3 vp)
		{
			// Project sample to 2d.
			vec4	flp = projection_matrix * vec4(s + vp, 1.0);

			vec2	pjb = flp.xy / flp.w;
//			pjb /= display_buffer_ratio;
			pjb *= 0.5;
			pjb += 0.5;
			vec2	projected_UV = pjb;// / display_buffer_ratio;
/*
			// Unpack sample normal.
			vec4	nz = UnpackNormalDepth(projected_UV);
			float	depth = nz.w + view_depth_offset;
if	(vp.z > depth)
	return vec3(0.0, 0.0, 0.0);

			vec3	svc = vec3((((projected_UV * display_buffer_ratio) - vec2(0.5, 0.5)) * 2.0) * inverse_projection_2d, 1.0);
			vec3	svp = svc * depth;

			//
vec3	dt = svp - vp;
float d = length(dt);
if	(d > ao_radius)
	return vec3(0.0, 0.0, 0.0);

//			if	(vp.z > nz.w)
	//			return vec3(0.0, 0.0, 0.0);
	return vec3(1.0, 0.0, 0.0);
*/
			return texture2D(source, projected_UV).xyz;

//			return vec3(pjb.xy / display_buffer_ratio, 0.0);		// Debug UV
		}

		vec3	GenerateHemisphereSample(vec2 UV, vec2 seed, vec3 n)
		{
			vec4	noise = texture2D(noise_texture, (UV + seed) / 128.0 * (display_buffer_ratio / inverse_buffer_size));
			vec3	sphere_p = normalize(noise.xyz * 2.0 - 1.0);
			return /*faceforward(sphere_p, sphere_p, n) * -*/sphere_p * ao_radius;		// faceforward returns -N if dot(N, I) > 0!!!
		}

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * framebuffer_fx_scaler * inverse_buffer_size;
			vec4	nz = UnpackNormalDepth(UV);

			float	z = nz.w;
			vec4	output_fragment;

			if	(z > distance)
				output_fragment = vec4(1.0, 1.0, 1.0, 1.0);

			else
			{
			output_fragment = texture2D(noise_texture, UV / 128.0 * (display_buffer_ratio / inverse_buffer_size));
/*
				vec3	n = nz.xyz;

				// Unpack depth and compute fragment position in view space.
				vec3	svc = vec3((((UV * display_buffer_ratio) - vec2(0.5, 0.5)) * 2.0) * inverse_projection_2d, 1.0);
				vec3	vp = svc * (z + view_depth_offset);
	
				vec3	k = vec3(0.0, 0.0, 0.0);
				for	(float y = 0.0; y < 1.0; y += 0.25)
					for	(float x = 0.0; x < 1.0; x += 0.25)
						k += SSDO(GenerateHemisphereSample(UV, vec2(x, y) * 8.0, n), vp);
				k /= 16.0;

//				k = SSDO(n * ao_radius, vp);

				// Blend to no AO on the last 25% of distance.
				k = mix(k, vec3(0.0, 0.0, 0.0), max((z - distance * 0.75) / distance * 0.25, 0.0));
				k = mix(vec3(0.0, 0.0, 0.0), k, strength);
				output_fragment = vec4(k, 1.0);
*/
			}
			gl_FragColor = output_fragment;
		}
	">
>

<NormalDepthBlur =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	sampler2D	source, gbuffer0;
		uniform	float		blur_size, framebuffer_fx_scaler, ao_radius;

		#(UnpackNormalDepth)

		vec4	BlurSample(vec2 UV, vec4 ref_nrm_depth, vec4 ref_source)
		{
			vec4	val_nrm_depth = UnpackNormalDepth(UV);
			if	((dot(val_nrm_depth.xyz, ref_nrm_depth.xyz) < 0.8) || (abs(val_nrm_depth.w - ref_nrm_depth.w) > (ao_radius / 1000.0)))
				return ref_source;
			return texture2D(source, UV);
		}

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size * framebuffer_fx_scaler;
			vec4	ref_nrm_depth = UnpackNormalDepth(UV),
					ref_source = texture2D(source, UV);

			float	blur_factor = blur_size * framebuffer_fx_scaler;
			vec4	txl = vec4(0.0, 0.0, 0.0, 0.0);
			for	(float v = -0.5; v < 0.49; v += 0.25)
				for	(float u = -0.5; u < 0.49; u += 0.25)
						txl += BlurSample(UV + vec2(blur_factor * u, blur_factor * v), ref_nrm_depth, ref_source);
			txl /= 16.0;

			gl_FragColor = vec4(txl.rgb, ref_source.a);
		}
	">
>

<SSAA =
	<Vertex = "
		void	main()
		{	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	sampler2D	source;

	float	lumRGB(vec3 v)
	{	return dot(v, vec3(0.212, 0.716, 0.072));	}

	void	main()
	{
		vec2	UV = gl_FragCoord.xy * inverse_buffer_size;

		float	w = 1.75;

		float	t = lumRGB(texture2D(source, UV + vec2(0.0, -1.0) * w * inverse_buffer_size).xyz),
				l = lumRGB(texture2D(source, UV + vec2(-1.0, 0.0) * w * inverse_buffer_size).xyz),
				r = lumRGB(texture2D(source, UV + vec2(1.0, 0.0) * w * inverse_buffer_size).xyz),
				b = lumRGB(texture2D(source, UV + vec2(0.0, 1.0) * w * inverse_buffer_size).xyz);

		vec2	n = vec2(-(t - b), r - l);
		float	nl = length(n);
		
		if	(nl < (1.0 / 6.0))
			gl_FragColor = texture2D(source, UV);

		else
		{
			n *= inverse_buffer_size / nl;

			vec4	o = texture2D(source, UV),
					t0 = texture2D(source, UV + n * 0.5) * 0.9,
					t1 = texture2D(source, UV - n * 0.5) * 0.9,
					t2 = texture2D(source, UV + n) * 0.75,
					t3 = texture2D(source, UV - n) * 0.75;

			gl_FragColor = (o + t0 + t1 + t2 + t3) / 4.3;
		}
	}
	">
>

<DofRadius =
	<Vertex = "
		void	main()
		{	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;		}
	">
	<Pixel = "
		uniform	float		framebuffer_fx_scaler, f_stop, f_dist, blur_size;
		uniform	vec2		inverse_buffer_size;
		uniform	sampler2D	gbuffer0;

		#(UnpackNormalDepth)

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			float	dof_factor = abs(UnpackNormalDepth(UV).w - f_dist) / f_stop;
			float	blur_factor = (dof_factor / framebuffer_fx_scaler * blur_size);// * inverse_buffer_size.x;
			gl_FragColor = vec4(blur_factor, 0.0, 0.0, 1.0);
		}
	">
>

<DofSpread =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size, display_buffer_ratio;
		uniform	sampler2D	source, coc_texture, noise_texture;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec2	noise = texture2D(noise_texture, UV / 128.0 * (display_buffer_ratio / inverse_buffer_size)).xy * 5.0;
		
			vec4	ref = texture2D(source, UV);
			float	ref_coc = min(texture2D(coc_texture, UV).x, 10.0);
		
			vec4	_output = ref;
		
			if	(ref_coc > 1.0)
			{
				float	k_total = 0.0;
		
				for	(float dv = -3.0; dv < 4.0; dv += 1.0)
					for	(float du = -3.0; du < 4.0; du += 1.0)
					{
						vec2	cnd_offset = vec2(du, dv) * noise; 
						vec2	cnd_UV = UV + cnd_offset * inverse_buffer_size;
		
						float	cnd_coc = texture2D(coc_texture, cnd_UV).x;
						float	coc = min(cnd_coc, ref_coc);
		
						float	cnd_distance = length(cnd_offset);
						if	(coc >= cnd_distance)
						{
							float	k = 1.0 / min(coc, 0.00001);
							k *= max(cnd_distance / (coc * 0.5 - 1.0), 0.35);					// Decrease brightness at bokeh center
		
							vec4	tex = texture2D(source, cnd_UV);
							_output += tex * k;
							k_total += k;
						}
					}
				_output /= k_total;
			}
		
			gl_FragColor = _output;
		}
	">
>

<DofBlur =
	<Vertex = "
		void	main()
		{	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	sampler2D	source, coc_texture;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;

			float	coc = texture2D(coc_texture, UV).x;
			float	k_blur = min(coc * 0.25, 1.25) * inverse_buffer_size.x;

			vec4	ref = texture2D(source, UV);

			vec4	gaussian =
						(
							texture2D(source, UV + vec2(-k_blur, -k_blur)) +
							texture2D(source, UV + vec2(0.0, -k_blur)) +
							texture2D(source, UV + vec2(k_blur, -k_blur)) +

							texture2D(source, UV + vec2(-k_blur, 0.0)) +
							ref +
							texture2D(source, UV + vec2(k_blur, 0.0)) +

							texture2D(source, UV + vec2(-k_blur, k_blur)) +
							texture2D(source, UV + vec2(0.0, k_blur)) +
							texture2D(source, UV + vec2(k_blur, k_blur))
						)	/ 9.0;
						
			gl_FragColor = gaussian == gaussian ? gaussian : ref;
		}
	">
>

<HDof =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	float		framebuffer_fx_scaler, f_stop, focal_distance, blur_size;
		uniform	vec2		inverse_buffer_size;
		uniform	sampler2D	source, gbuffer0;

		#(UnpackNormalDepth)

		vec4	sample(vec2 UV, vec2 dt, float texel_depth, float dof_factor)
		{	return texture2D(source, UV + dt);	}

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size * framebuffer_fx_scaler;

			vec4	ref = UnpackNormalDepth(UV);
			float	texel_depth = ref.w;
			float	dof_factor = abs(texel_depth - focal_distance) / f_stop;
			float	blur_factor = min(dof_factor / framebuffer_fx_scaler * blur_size * 0.5, 16.0) * inverse_buffer_size.x;

			vec4	txl = blur_factor < 0.0025 ? texture2D(source, UV) :
					(
						sample(UV, vec2(blur_factor * -1.0, 0.0), texel_depth, dof_factor) * 0.2 +
						sample(UV, vec2(blur_factor * -0.82, 0.0), texel_depth, dof_factor) * 0.45 +
						sample(UV, vec2(blur_factor * -0.66, 0.0), texel_depth, dof_factor) * 0.7 +
						sample(UV, vec2(blur_factor * -0.5, 0.0), texel_depth, dof_factor) * 0.9 +
						sample(UV, vec2(blur_factor * -0.33, 0.0), texel_depth, dof_factor) * 0.9 +
						sample(UV, vec2(blur_factor * -0.16, 0.0), texel_depth, dof_factor) * 0.95 +
						sample(UV, vec2(0.0, 0.0), texel_depth, dof_factor) +
						sample(UV, vec2(blur_factor *  0.16, 0.0), texel_depth, dof_factor) * 0.95 +
						sample(UV, vec2(blur_factor *  0.33, 0.0), texel_depth, dof_factor) * 0.9 +
						sample(UV, vec2(blur_factor *  0.5, 0.0), texel_depth, dof_factor) * 0.9 +
						sample(UV, vec2(blur_factor *  0.66, 0.0), texel_depth, dof_factor) * 0.7 +
						sample(UV, vec2(blur_factor *  0.82, 0.0), texel_depth, dof_factor) * 0.45 +
						sample(UV, vec2(blur_factor *  1.0, 0.0), texel_depth, dof_factor) * 0.2
					)	/	9.2;

			gl_FragColor = vec4(txl.rgb, 1.0 - min(dof_factor, 1.0));
		}
	">
>

<VDof =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	float		framebuffer_fx_scaler, f_stop, focal_distance, blur_size;
		uniform	vec2		inverse_buffer_size;
		uniform	sampler2D	source, gbuffer0;

		#(UnpackNormalDepth)

		vec4	sample(vec2 UV, vec2 dt, float texel_depth, float dof_factor)
		{	return texture2D(source, UV + dt);	}

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size * framebuffer_fx_scaler;

			vec4	ref = UnpackNormalDepth(UV);
			float	texel_depth = ref.w;
			float	dof_factor = abs(texel_depth - focal_distance) / f_stop;
			float	blur_factor = min(dof_factor / framebuffer_fx_scaler * blur_size * 0.5, 16.0) * inverse_buffer_size.x;

			vec4	txl = blur_factor < 0.0025 ? texture2D(source, UV) :
					(
						sample(UV, vec2(0.0, blur_factor * -1.0), texel_depth, dof_factor) * 0.2 +
						sample(UV, vec2(0.0, blur_factor * -0.82), texel_depth, dof_factor) * 0.45 +
						sample(UV, vec2(0.0, blur_factor * -0.66), texel_depth, dof_factor) * 0.7 +
						sample(UV, vec2(0.0, blur_factor * -0.5), texel_depth, dof_factor) * 0.9 +
						sample(UV, vec2(0.0, blur_factor * -0.33), texel_depth, dof_factor) * 0.9 +
						sample(UV, vec2(0.0, blur_factor * -0.16), texel_depth, dof_factor) * 0.95 +
						sample(UV, vec2(0.0, 0.0), texel_depth, dof_factor) +
						sample(UV, vec2(0.0, blur_factor *  0.16), texel_depth, dof_factor) * 0.95 +
						sample(UV, vec2(0.0, blur_factor *  0.33), texel_depth, dof_factor) * 0.9 +
						sample(UV, vec2(0.0, blur_factor *  0.5), texel_depth, dof_factor) * 0.9 +
						sample(UV, vec2(0.0, blur_factor *  0.66), texel_depth, dof_factor) * 0.7 +
						sample(UV, vec2(0.0, blur_factor *  0.82), texel_depth, dof_factor) * 0.45 +
						sample(UV, vec2(0.0, blur_factor *  1.0), texel_depth, dof_factor) * 0.2
					)	/	9.2;

			gl_FragColor = vec4(txl.rgb, 1.0 - min(dof_factor, 1.0));
		}
	">
>

<HGaussianBlur =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	sampler2D	source;
		uniform	float		blur_size, framebuffer_fx_scaler;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size * framebuffer_fx_scaler;
			float	blur_factor = blur_size;// / framebuffer_fx_scaler;

			vec4	ref = texture2D(source, UV);
			vec4	txl =	(
						texture2D(source, UV + vec2(blur_factor * -1.0, blur_factor * -0.1)) * 0.25 +
						texture2D(source, UV + vec2(blur_factor * -0.75, blur_factor * 0.1)) * 0.5 +
						texture2D(source, UV + vec2(blur_factor * -0.5, blur_factor * -0.1)) * 0.75 +
						texture2D(source, UV + vec2(blur_factor * -0.25, blur_factor * 0.1)) * 0.8 +
						ref * 1.0 +
						texture2D(source, UV + vec2(blur_factor *  0.25, blur_factor * 0.1)) * 0.8 +
						texture2D(source, UV + vec2(blur_factor *  0.5, blur_factor * -0.1)) * 0.75 +
						texture2D(source, UV + vec2(blur_factor *  0.75, blur_factor * 0.1)) * 0.5 +
						texture2D(source, UV + vec2(blur_factor *  1.0, blur_factor * -0.1)) * 0.25
					) * (1.0 / 5.6);

			gl_FragColor = vec4(txl.rgb, ref.a);
		}
	">
>

<VGaussianBlur =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	sampler2D	source;
		uniform	float		blur_size, framebuffer_fx_scaler;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size * framebuffer_fx_scaler;
			float	blur_factor = blur_size;// / framebuffer_fx_scaler;

			vec4	ref = texture2D(source, UV);
			vec4	txl =	(
						texture2D(source, UV + vec2(blur_factor * -0.1, blur_factor * -1.0)) * 0.25 +
						texture2D(source, UV + vec2(blur_factor * 0.1, blur_factor * -0.75)) * 0.5 +
						texture2D(source, UV + vec2(blur_factor * -0.1, blur_factor * -0.5)) * 0.75 +
						texture2D(source, UV + vec2(blur_factor * 0.1, blur_factor * -0.25)) * 0.8 +
						ref * 1.0 +
						texture2D(source, UV + vec2(blur_factor * 0.1, blur_factor *  0.25)) * 0.8 +
						texture2D(source, UV + vec2(blur_factor * -0.1, blur_factor *  0.5)) * 0.75 +
						texture2D(source, UV + vec2(blur_factor * 0.1, blur_factor *  0.75)) * 0.5 +
						texture2D(source, UV + vec2(blur_factor * -0.1, blur_factor *  1.0)) * 0.25
					) * (1.0 / 5.6);

			gl_FragColor = vec4(txl.rgb, ref.a);
		}
	">
>

<LightStreak =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size, streak_direction;
		uniform	sampler2D	source;
		uniform	float		framebuffer_fx_scaler, streak_attenuation;
		uniform	float		pass;

		void	main()
		{
			vec2	texel_size = inverse_buffer_size * framebuffer_fx_scaler;
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * texel_size;

			float	b = pow(4.0, pass);
			vec3	color = texture2D(source, UV).rgb;
			float	k = 1.0;

			for	(float s = 1.0; s < 4.0; s++)
			{
				float	w = clamp(pow(streak_attenuation, b * s), 0.0, 1.0);
				vec2	dt_UV = streak_direction * b * vec2(s, s) * texel_size;

				color += w * texture2D(source, UV - dt_UV).bgr;
				color += w * texture2D(source, UV + dt_UV).bgr;
				k += w + w;
			}

			gl_FragColor = vec4(color / k, 1.0);
		}
	">
>

<HDRnoLDR =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	sampler2D	source;
		uniform	float		framebuffer_fx_scaler;
		uniform	float		threshold;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size * framebuffer_fx_scaler;
			vec4	hdr = texture2D(source, UV);
			gl_FragColor = hdr != hdr ? vec4(0.0, 0.0, 0.0, 1.0) : vec4(clamp(hdr.rgb - threshold, 0.0, 1.0), hdr.a);
		}
	">
>

<ToneMapping =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	float		framebuffer_fx_scaler, strength;
		uniform	sampler2D	source, bloom;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;;
			vec4	source_color = texture2D(source, UV);
			gl_FragColor = vec4(source_color.rgb + texture2D(bloom, UV).rgb * strength, source_color.a);
		}
	">
>

<ATIglClearWorkaroundShadowMap =
	<Vertex = "
		void	main()
		{	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;		}
	">
	<Pixel = "
		uniform	vec4		clear_color;
		void	main()
		{	gl_FragColor = clear_color;	}
	">
>

<BlitLayerAlpha =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	sampler2D	compose_alpha;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x + 0.5, gl_FragCoord.y + 0.5) * inverse_buffer_size;
/*
			vec4	gx = 
			(
				texture2D(compose_alpha, UV + vec2(-1.0, -1.0) * inverse_buffer_size) * 3.0 +
				texture2D(compose_alpha, UV + vec2( 0.0, -1.0) * inverse_buffer_size) * 10.0 +
				texture2D(compose_alpha, UV + vec2( 1.0, -1.0) * inverse_buffer_size) * 3.0 +
				texture2D(compose_alpha, UV + vec2(-1.0,  1.0) * inverse_buffer_size) * -3.0 +
				texture2D(compose_alpha, UV + vec2( 0.0,  1.0) * inverse_buffer_size) * -10.0 +
				texture2D(compose_alpha, UV + vec2( 1.0,  1.0) * inverse_buffer_size) * -3.0
			);

			vec4	gy = 
			(
				texture2D(compose_alpha, UV + vec2(-1.0, -1.0) * inverse_buffer_size) * 3.0 +
				texture2D(compose_alpha, UV + vec2(-1.0,  0.0) * inverse_buffer_size) * 10.0 +
				texture2D(compose_alpha, UV + vec2(-1.0,  1.0) * inverse_buffer_size) * 3.0 +
				texture2D(compose_alpha, UV + vec2( 1.0, -1.0) * inverse_buffer_size) * -3.0 +
				texture2D(compose_alpha, UV + vec2( 1.0,  0.0) * inverse_buffer_size) * -10.0 +
				texture2D(compose_alpha, UV + vec2( 1.0,  1.0) * inverse_buffer_size) * -3.0
			);

			vec4	g = sqrt(gx * gx + gy * gy);
			float	i = step((g.x + g.y + g.z) / 3.0, 0.9);

			vec4	ref = texture2D(compose_alpha, UV);
			vec4	smt =
			(
				texture2D(compose_alpha, UV + vec2(-0.9, 0.6) * inverse_buffer_size) +
				texture2D(compose_alpha, UV + vec2(0.6, 0.9) * inverse_buffer_size) +
				texture2D(compose_alpha, UV + vec2(-0.6, -0.9) * inverse_buffer_size) +
				texture2D(compose_alpha, UV + vec2(0.9, -0.6) * inverse_buffer_size) +
				ref * 2.0
			)	/ 6.0;

			gl_FragColor = ref * vec4(i, i, i, 1.0);//vec4(mix(ref.rgb, smt.rgb, i), ref.a);
*/
			gl_FragColor =	(
								texture2D(compose_alpha, UV + vec2(-0.9, 0.6) * inverse_buffer_size) +
								texture2D(compose_alpha, UV + vec2(0.6, 0.9) * inverse_buffer_size) +
								texture2D(compose_alpha, UV + vec2(-0.6, -0.9) * inverse_buffer_size) +
								texture2D(compose_alpha, UV + vec2(0.9, -0.6) * inverse_buffer_size) +
								texture2D(compose_alpha, UV) * 6.0
							)	/ 10.0;
		}
	">
>

<ChromaticDispersion =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	sampler2D	compose_alpha;
		uniform	float		width;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	frag0 = texture2D(compose_alpha, UV + vec2(0.0, 0.0) * width * inverse_buffer_size),
					frag1 = texture2D(compose_alpha, UV + vec2(1.0, 0.0) * width * inverse_buffer_size),
					frag2 = texture2D(compose_alpha, UV + vec2(2.0, 0.0) * width * inverse_buffer_size);
			gl_FragColor = vec4(frag0.r, frag1.g, frag2.b, frag0.a);
		}
	">
>

<Sharpen =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	sampler2D	source;
		uniform	float		strength;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	ref = texture2D(source, UV);

			gl_FragColor =	mix
							(
								ref,
								texture2D(source, UV + vec2(-1.0, -1.0) * inverse_buffer_size) * -0.125 +
								texture2D(source, UV + vec2( 0.0, -1.0) * inverse_buffer_size) * -0.125 +
								texture2D(source, UV + vec2( 1.0, -1.0) * inverse_buffer_size) * -0.125 +
								texture2D(source, UV + vec2(-1.0,  0.0) * inverse_buffer_size) * -0.125 +
								ref * 2.0 +
								texture2D(source, UV + vec2( 1.0,  0.0) * inverse_buffer_size) * -0.125 +
								texture2D(source, UV + vec2(-1.0,  1.0) * inverse_buffer_size) * -0.125 +
								texture2D(source, UV + vec2( 0.0,  1.0) * inverse_buffer_size) * -0.125 +
								texture2D(source, UV + vec2( 1.0,  1.0) * inverse_buffer_size) * -0.125,
								strength
							);
		}
	">
>

<HSL =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	sampler2D	compose_alpha;
		uniform	float		H, S, L;

vec3	RGBToHSL(vec3 color)
{
	float	fmin = min(min(color.r, color.g), color.b);		// Min. value of RGB
	float	fmax = max(max(color.r, color.g), color.b);		// Max. value of RGB
	float	delta = fmax - fmin;							// Delta RGB value

	vec3	hsl = vec3(0.0, 0.0, (fmax + fmin) * 0.5);

	if	(delta != 0.0)
	{
		hsl.y = hsl.z < 0.5 ? delta / (fmax + fmin) : delta / (2.0 - fmax - fmin);

		float	hdelta = delta * 0.5;
		vec3	deltaRGB = (((vec3(fmax, fmax, fmax) - color) / 6.0) + vec3(hdelta, hdelta, hdelta)) / delta;

				if	(color.r == fmax )
			hsl.x = clamp(deltaRGB.b - deltaRGB.g, 0.0, 1.0);
		else	if	(color.g == fmax)
			hsl.x = clamp((1.0 / 3.0) + deltaRGB.r - deltaRGB.b, 0.0, 1.0);
		else	if	(color.b == fmax)
			hsl.x = clamp((2.0 / 3.0) + deltaRGB.g - deltaRGB.r, 0.0, 1.0);
	}
	return hsl;
}

float	HueToRGB(float f1, float f2, float hue)
{
			if	(hue < 0.0)
		hue += 1.0;
	else	if	(hue > 1.0)
		hue -= 1.0;

			if	((6.0 * hue) < 1.0)
		return f1 + (f2 - f1) * 6.0 * hue;
	else	if	((2.0 * hue) < 1.0)
		return f2;
	else	if	((3.0 * hue) < 2.0)
		return f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;

	return f1;
}

vec3	HSLToRGB(vec3 hsl)
{
	if	(hsl.y == 0.0)
		return vec3(hsl.z);

	float	f2 = hsl.z < 0.5 ? hsl.z * (1.0 + hsl.y) : (hsl.z + hsl.y) - hsl.y * hsl.z;
	float	f1 = 2.0 * hsl.z - f2;
	return vec3(HueToRGB(f1, f2, hsl.x + (1.0 / 3.0)), HueToRGB(f1, f2, hsl.x), HueToRGB(f1, f2, hsl.x - (1.0 / 3.0)));
}

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	frag = texture2D(compose_alpha, UV);
			vec3	hsl = RGBToHSL(frag.rgb);

			hsl.x += H;
			if	(hsl.x > 1.0)
				hsl.x -= 1.0;
			hsl.y *= S;
			hsl.z *= L;

			vec3	rgb = HSLToRGB(hsl);
			gl_FragColor = vec4(rgb, frag.a);
		}
	">
>

<RadialBlur =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		display_buffer_ratio, inverse_buffer_size, center;
		uniform	sampler2D	source, noise_texture;
		uniform	float		strength;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size - center;
			float	noise = texture2D(noise_texture, UV / 128.0 * (display_buffer_ratio / inverse_buffer_size)).r * 0.75 + 0.25;

			vec4	txl = texture2D(source, UV + center);
			for	(float k = 0.1; k < 1.0; k += 0.1)
				txl += texture2D(source, UV / (1.0 + k * strength * noise) + center);

			gl_FragColor = txl * 0.1;
		}
	">
>

<Noise =
	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	sampler2D	source, noise_texture;
		uniform	float		strength, random_a, random_b, monochromatic, luma_bias;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec2	noise_UV = UV / (inverse_buffer_size * 128.0);

			vec4	noise_a = texture2D(noise_texture, noise_UV + vec2(random_a * 3.456, random_a * 7.145)); 
			vec4	noise_b = texture2D(noise_texture, noise_UV + vec2(random_b * 2.789, random_b * 9.781)); 
			vec4	noise = noise_a.r > 0.5 ? noise_b.barg : noise_a.rgba;

			noise = mix(noise, noise.rrrr, monochromatic);

			vec4	txl = texture2D(source, UV);
			float	luma = /*txl.rgb * vec3(0.3, 0.59, 0.11)*/(txl.r + txl.g + txl.b) / 3.0;

			float	_strength = strength;
			if	(luma_bias < 0.5)
				_strength *= pow(clamp(1.0 + luma * (luma_bias - 0.5) * 2.0, 0.0, 1.0), 4.0);
			if	(luma_bias > 0.5)
				_strength *= pow(clamp(1.0 - (1.0 - luma) * (luma_bias - 0.5) * 2.0, 0.0, 1.0), 4.0);

			gl_FragColor = vec4(txl.rgb * (1.0 + (noise.rgb - 0.5) * _strength * 2.0), txl.a);
		}
	">
>
